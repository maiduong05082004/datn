import React, { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Spin, Table, Button, InputNumber, message, Modal } from "antd";
import AxiosInstance from "@/configs/axios";

// Khai báo kiểu dữ liệu
type Product = {
    id: number;
    name: string;
    price: string;
    stock: number;
    category_name: string;
    product_cost: {
        supplier: string;
        cost_price: string;
        import_date: string;
        sale_status: string;
    };
    variations: any[];
};

const InventoryManagement: React.FC = () => {
    const [activeStatus, setActiveStatus] = useState<string>("active");
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [updateStockProductId, setUpdateStockProductId] = useState<number | null>(null);
    const [newStock, setNewStock] = useState<number>(0);

    const getApiUrl = (status: string): string => {
        switch (status) {
            case "active":
                return "http://127.0.0.1:8000/api/admins/inventory/listproductastive";
            case "inactive":
                return "http://127.0.0.1:8000/api/admins/inventory/listproductinactive";
            case "outofstock":
                return "http://127.0.0.1:8000/api/admins/inventory/product_isoutof_stock";
            case "fewsizes":
                return "http://127.0.0.1:8000/api/admins/inventory/listproducts_withfewsizes";
            default:
                return "http://127.0.0.1:8000/api/admins/inventory/listproductastive";
        }
    };

    const { data, isLoading, refetch } = useQuery<Product[]>({
        queryKey: ["inventory", activeStatus],
        queryFn: async () => {
            const url = getApiUrl(activeStatus);
            if (activeStatus === "fewsizes") {
                const response = await AxiosInstance.post(url, { size_limit: 10 });
                return response.data.data;
            } else {
                const response = await AxiosInstance.get(url);
                return response.data.data;
            }
        },
    });

    // Mutation để chuyển trạng thái sản phẩm
    const updateStatusMutation = useMutation({
        mutationFn: async ({ id, action }: { id: number; action: string }) => {
            const url =
                action === "deactivate"
                    ? `http://127.0.0.1:8000/api/admins/inventory/updateproductinactive/${id}`
                    : `http://127.0.0.1:8000/api/admins/inventory/updateproductactive/${id}`;
            return AxiosInstance.put(url);
        },
        onSuccess: () => {
            message.success("Cập nhật trạng thái thành công!");
            refetch();
        },
        onError: () => {
            message.error("Cập nhật trạng thái thất bại!");
        },
    });

    // Mutation để cập nhật số lượng sản phẩm
    const updateStockMutation = useMutation({
        mutationFn: async ({ id, stock }: { id: number; stock: number }) => {
            return AxiosInstance.put(`http://127.0.0.1:8000/api/admins/inventory/updatestockproduct/${id}`, {
                stock,
            });
        },
        onSuccess: () => {
            message.success("Cập nhật số lượng thành công!");
            refetch();
            setIsModalOpen(false);
        },
        onError: () => {
            message.error("Cập nhật số lượng thất bại!");
        },
    });

    const openStockModal = (id: number) => {
        setUpdateStockProductId(id);
        setIsModalOpen(true);
    };

    const handleStockUpdate = () => {
        if (updateStockProductId) {
            updateStockMutation.mutate({ id: updateStockProductId, stock: newStock });
        }
    };

    const columns = [
        {
            title: "ID",
            dataIndex: "id",
            key: "id",
        },
        {
            title: "Tên Sản Phẩm",
            dataIndex: "name",
            key: "name",
        },
        {
            title: "Giá",
            dataIndex: "price",
            key: "price",
            render: (price: string) => `${parseFloat(price).toLocaleString()} VND`,
        },
        {
            title: "Tồn Kho",
            dataIndex: "stock",
            key: "stock",
        },
        {
            title: "Danh Mục",
            dataIndex: "category_name",
            key: "category_name",
        },
        {
            title: "Chức Năng",
            key: "actions",
            render: (_: any, record: Product) => (
                <div className="flex gap-3">
                    {(activeStatus === "active" || activeStatus === "inactive") && (
                        <Button
                            type="primary"
                            danger={activeStatus === "active"}
                            onClick={() =>
                                updateStatusMutation.mutate({
                                    id: record.id,
                                    action: activeStatus === "active" ? "deactivate" : "activate",
                                })
                            }
                        >
                            {activeStatus === "active" ? "Ngừng Bán" : "Bán Lại"}
                        </Button>
                    )}
                    <Button type="default" onClick={() => openStockModal(record.id)}>
                        Cập Nhật Số Lượng
                    </Button>
                </div>
            ),
        },
    ];

    const statusOptions = [
        { key: "active", label: "Đang Bán" },
        { key: "inactive", label: "Hàng Tồn (Ngừng Bán)" },
        { key: "fewsizes", label: "Sắp Hết Hàng" },
        { key: "outofstock", label: "Hết Hàng" },
    ];

    return (
        <div className="p-5">
            <div className="flex gap-6 mb-5">
                {statusOptions.map((status) => (
                    <button
                        key={status.key}
                        onClick={() => setActiveStatus(status.key)}
                        className={`py-2 px-4 border-b-2 transition-all ${
                            activeStatus === status.key
                                ? "border-blue-500 text-blue-600 font-bold"
                                : "border-transparent text-gray-500 hover:text-blue-600 hover:border-gray-300"
                        }`}
                    >
                        {status.label}
                    </button>
                ))}
            </div>
            {isLoading ? (
                <Spin tip="Loading..." className="flex justify-center items-center h-screen" />
            ) : (
                <Table
                    columns={columns}
                    dataSource={data}
                    rowKey={(record) => record.id}
                    pagination={{ pageSize: 10 }}
                    bordered
                />
            )}
            <Modal
                title="Cập Nhật Số Lượng"
                visible={isModalOpen}
                onOk={handleStockUpdate}
                onCancel={() => setIsModalOpen(false)}
            >
                <InputNumber
                    min={1}
                    value={newStock}
                    onChange={(value) => setNewStock(value || 0)}
                    placeholder="Nhập số lượng mới"
                />
            </Modal>
        </div>
    );
};

export default InventoryManagement;


